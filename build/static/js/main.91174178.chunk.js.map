{"version":3,"sources":["serviceWorker.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","CardList","robots","Error","Scroll","props","style","overflowY","border","height","children","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","name","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCMSC,EArBC,SAAC,GAAW,EAAVC,OAEV,MAAM,IAAIC,MAAM,OCITC,EAPA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAC7DJ,EAAMK,WCUJC,EAbG,SAAC,GAA8B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAC7B,OACI,yBAAKC,UAAU,mBACf,2BACAA,UAAU,kBACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCWHK,G,kBAlBX,WAAYb,GAAO,IAAD,8BACd,4CAAMA,KACDc,MAAQ,CACTC,UAAS,GAHC,E,+EAMAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGpB,OAAGG,KAAKJ,MAAMC,SACH,uDAEJG,KAAKlB,MAAMK,a,GAdHe,cC2CZC,E,YApCX,aAAc,IAAD,8BACT,+CAYJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACZ,YAAYgB,EAAMC,OAAOC,SAZxC,EAAKX,MAAQ,CACTjB,OAAO,GACPU,YAAY,IAJP,E,iFAOO,IAAD,OACfmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKX,SAAS,CAACtB,OAAQiC,S,+BAO9B,IAAD,EACyBZ,KAAKJ,MAA5BjB,EADF,EACEA,OAAQU,EADV,EACUA,YACTwB,EAAiBlC,EAAOmC,QAAO,SAAAnC,GACjC,OAAOA,EAAOoC,KAAKC,cAAcC,SAAS5B,EAAY2B,kBAE9D,OAAQrC,EAAOuC,OAEX,yBAAK3B,UAAU,MACX,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWD,aAAcU,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUzB,OAAQkC,OAPV,wBAAItB,UAAU,MAAd,e,GAvBVW,a,MCElBiB,IAASC,OACL,kBAAC,EAAD,MACCC,SAASC,eAAe,SNsHvB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,iB","file":"static/js/main.91174178.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList =({robots})=>{\r\n    if(true){\r\n        throw new Error('No')\r\n    }\r\n    return(\r\n        <div>\r\n        {\r\n            robots.map((user, i)=>{\r\n                 return  (\r\n                    <Card \r\n                        key={i} \r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email} \r\n                     />\r\n             );\r\n        }\r\n    )\r\n        }\r\n        </div>);   \r\n};\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return (\r\n        <div style={{overflowY:'scroll', border:'5px solid black', height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange})=>{\r\n    return (\r\n        <div className='pa3 ba b--green'>\r\n        <input \r\n        className='pa3 ba b--green' \r\n        type='search' \r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n        />\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default SearchBox;","import React,{Component} from 'react';\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError:false\r\n        }\r\n    }\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError:true})\r\n    }\r\n        render(){\r\n            if(this.state.hasError){\r\n                return <h1>Oops. This is not good.</h1>\r\n            }\r\n            return this.props.children\r\n        }\r\n    }\r\n\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList'\r\nimport Scroll from '../components/Scroll';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css'\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots:[],\r\n            searchfield:''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(users=>this.setState({robots: users}))\r\n    }\r\n\r\n    onSearchChange = (event)=>{\r\n        this.setState({searchfield:event.target.value})\r\n    }\r\n\r\n    render (){\r\n        const {robots, searchfield} = this.state;\r\n        const filteredRobots = robots.filter(robots =>{\r\n            return robots.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n    return !robots.length ? <h1 className='tc'>Loading</h1>:\r\n    (\r\n        <div className='tc'>\r\n            <h1 className='f1'>Robo Friends</h1>\r\n            <SearchBox searchChange={this.onSearchChange}/>\r\n            <Scroll>\r\n                <ErrorBoundry>\r\n                    <CardList robots={filteredRobots}/>\r\n                </ErrorBoundry>\r\n            </Scroll>\r\n        </div>);\r\n    } \r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n// import Card from './Card';\nimport App from './containers/App';\nimport 'tachyons';\n\n\nReactDOM.render(\n    <App/>\n    ,document.getElementById('root')\n    );\n\nserviceWorker.unregister();\n"],"sourceRoot":""}